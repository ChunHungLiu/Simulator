MemoryRequest.h

1. What does issue of memory request mean ? Also, d_prefetched and d_hit ? 
Ans. Means that the issue has been sent to the memory hierarchy for simulation. Or more specifically, it has been sent to the 
     request queue of the first memory component. 


MemoryComponent.h

1. What is _statsOrder ?
Ans. A list of statistics names. 
     _stats is a map of stat names to stats counters (Stats structures). 

2. What is a heartbeat ? 
 Utility, and functionality?

4. When can a component move beyond the simulator time ?
Ans. The components can overtake simulator in time after processing requests (adding busy cycles). This needs 
     me to call the advance simulation every time. 

5. Check the stalling function for memory request in memory component. 


MemorySimulator.h

_hier is a pointer to the vector containing the vectors of memory components (for each CPU ID). 

1. If _currentCycle is a protected member of memory simulator, how can it be passed to the setBackpointer function in 
   MemoryComponent ?
   Remember it's protected, not private. Hence it can be accessed from classes derived from that class. 

2. Who calls AdvanceSimulation ?
	AutoAdvance does. 


3. How do components get added to the component list (_components) of the simulator (after it is cleared in the constructor) ?
Ans. In the function ParseSimulatorConfiguration. This is the function where system gets defined. 


Table.h

1. What does UpdateReplacementPolicy do (takes table operation type as parameter)?
	They are defined in the Table<policyname> files in the policylist.h header. It describes the various table operations like 
read, insert, invalidate etc for each type of table (varying according to replacement policy like LRU, NRU etc).

2. What does passing the policy_value_t (eg POLICY_HIGH) mean when passed to the above function ?


CmpCache.h

1. Wat is meant by partial write?

2. Why do we check for serialLookup in partial write and not in write?
   IN a write, the processor does not stall but in partial writeback, 

explain the different latencies for read, write, partial write (has datastore latency) and writeback

What is a dirtyreply and how does it work ?
it is set in ProcessReturn and EvictBlock. It is used to ientify whether a returning request was dirty or not. When we have 
eviction events, they are done in ProcessReturn and not ProcessRequest. So in ProcessReturn, if dirtyreply is set to True, then we 
know to go on ahead with the eviction operation. 



